package com.project.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.project.domain.Fluid;

public class FluidM implements IFluidM {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableFluid = "CREATE TABLE Fluid(id bigint GENERATED BY DEFAULT AS IDENTITY, data_pobrania varchar(20), rodzaj varchar(20), objetosc int, badanie_id int, FOREIGN KEY(badanie_id) REFERENCES Badanie(id) ON DELETE CASCADE ON UPDATE CASCADE)";

	private PreparedStatement Sadd_one;
	private PreparedStatement Sdelete_all;
	private PreparedStatement Sdelete_one;
	private PreparedStatement Sget_all;
	private PreparedStatement Supdate;
	private PreparedStatement Sset_badanie;
	private PreparedStatement Sget_for_badanie;

	private Statement statement;
	
	public FluidM() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Fluid".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableMedicine);

			Sadd_one = connection.prepareStatement("INSERT INTO Fluid (data_pobrania, rodzaj, objetosc, badanie_id) VALUES (?,?,?,?)");
			Sdelete_one = connection.prepareStatement("DELETE FROM Fluid WHERE data_pobrania=?");
			Sdelete_all = connection.prepareStatement("DELETE FROM Fluid");
			Sget_all = connection.prepareStatement("SELECT id, data_pobrania, rodzaj, objetosc, badanie_id FROM Fluid");
			Supdate = connection.prepareStatement("UPDATE Fluid SET data_pobrania=?, rodzaj=?, objetosc=?, badanie_id=? WHERE data_pobrania=?");
			Sset_badanie = connection.prepareStatement("UPDATE Fluid SET badanie_id=(SELECT id FROM Badanie WHERE wynik=?) WHERE data_pobrania=?;");
			Sget_for_badanie = connection.prepareStatement("SELECT id, data_pobrania, rodzaj, objetosc, badanie_id FROM Fluid WHERE badanie_id = (SELECT id FROM Badanie WHERE wynik=?);");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public Connection getConnection() {
		return connection;
	}
	@Override
	public boolean add_fluid(Fluid fluid) {
		int count = 0;
		try {
			Sadd_one.setString(1, fluid.getData_pobrania());
			Sadd_one.setInt(2, fluid.getRodzaj());
			Sadd_one.setInt(3, fluid.getObjetosc());
			Sadd_one.setInt(4, fluid.getBadanie_id());
			

			count = Sadd_one.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		if(count == 1){
			return true;
		}else{
			return false;
		}
	}

	@Override
	public boolean add_all_fluid(List<Fluid> fluid) {
		try {
			connection.setAutoCommit(false);
			
			for(Fluid fluidy : fluid){
				Sadd_one.setString(1, fluidy.getTytul());
				Sadd_one.setInt(2, fluidy.getDlugosc());
				Sadd_one.setInt(3, fluidy.getIl_miejsc());
				Sadd_one.setInt(4, fluidy.getKat_id());
				Sadd_one.executeUpdate();
			}
			
			connection.commit();
			connection.setAutoCommit(true);
		} catch (SQLException e) {
			try {

				connection.rollback();
				connection.setAutoCommit(true);
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		
		return false;
	}

	@Override
	public List<Fluid> get_all_fluid() {
		List<Fluid> fluid = new ArrayList<Fluid>();

		try {
			ResultSet rs = Sget_all.executeQuery();

			while (rs.next()) {
				Fluid f = new Fluid();
				f.setId(rs.getInt("id"));
				f.setData_pobrania(rs.getString("data_pobrania"));
				f.setRodzaj(rs.getInt("rodzaj"));
				f.setObjetosc(rs.getInt("objetosc"));
				f.setKat_id(rs.getInt("badanie_id"));
				fluid.add(f);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return fluid;
	}
	public int delete_Fluid(Fluid fluid){
		int count = 0;
		try{
			Sdelete_one.setString(1, fluid.getData_badania());
			count = Sdelete_one.executeUpdate();
		}catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public boolean update_fluid(Fluid sfluid, Fluid nfluid) {
		int count = 0;
		try {
			//NEW
			Supdate.setString(1, nfluid.getData_pobrania());
			Supdate.setInt(2, nfluid.getRodzaj());
			Supdate.setInt(3, nfluid.getObjetoscc());
			Supdate.setInt(4, nfluid.getBadanie_id());
			//OLD
			Supdate.setString(5, sfluid.getData_pobrania());

			count = Supdate.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		if(count == 1) return true;
		else return false;
	}

	@Override
	public void clear_fluid() {
		try {
			Sdelete_all.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean clear_fluid(Fluid fluid) {
		int count = 0;
		try{
			Sdelete_one.setString(1, fluid.getData_pobrania());
			count = Sdelete_one.executeUpdate();
		}catch (SQLException e) {
			e.printStackTrace();
		}
		if(count ==1) return true;
		else return false;
	}

	@Override
	public void set_badanie_for_fluid(Fluid fluid, String badanie_wynik) {
		try {
			Sset_badanie.setString(1, badanie_wynik);
			Sset_badanie.setString(2, fluid.getData_pobrania());
			System.out.println(Sset_badanie.executeUpdate());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public List<Fluid> get_all_fluid_for_badanie(String wynik) {
		
		List<Fluid> fluid = new ArrayList<Fluid>();
		try {
			Sget_for_badanie.setString(1, wynik);
			ResultSet rs = Sget_for_badanie.executeQuery();
			while (rs.next()) {
				Fluid f = new Fluid();
				f.setTytul(rs.getString("data_pobrania"));
				f.setDlugosc(rs.getInt("rodzaj"));
				f.setIl_miejsc(rs.getInt("objetosc"));
				f.setKat_id(rs.getInt("Badanie_id"));
				fluid.add(f);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return fluid;
	}
	
	
	
}
